/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   recup                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: nadjemia <nadjemia@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/07 18:52:16 by noah              #+#    #+#             */
/*   Updated: 2024/06/21 17:11:00 by nadjemia         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../minishell.h"

static int	is_redir(t_token *cur)
{
	if (!ft_strcmp(cur->content, "<<") && cur->type == -1)
		heredoc_type(cur);
	else if (!ft_strcmp(cur->content, "<") && cur->type == -1)
		cur->type = OUTREDIR, 1;
	else if (!ft_strcmp(cur->content, ">") && cur->type == -1)
		cur->type = INREDIR;
	else if (!ft_strcmp(cur->content, ">>") && cur->type == -1)
		cur->type = INREDIRAPP;
	else
		return (0);
	return (1);
}

static void	heredoc_type(t_token *cur)
{
	cur->type = HEREDOC;
	cur->next->type = LIM;
	if (cur->next->next && !is_redir(cur))
		cur->next->next->type = CMD;
}

static int	is_opt(t_token *cur)
{
	if (cur->prev == NULL)
		return (0);
	if (cur->prev->type != CMD)
		return (0);
	if (cur->content[0] == '-' && ft_isalpha(cur->content[1]))
		return (1);
	return (0);
}

void	type_token(t_token **tokens)
{
	t_token	*cur;
	int		i;
	
	i = -1;
	while (tokens[++i])
	{
		cur = tokens[i];
		while (cur)
		{
			is_redir(cur);
			if (!cur->prev && cur->type == -1)
				cur->type = CMD;
			if (is_opt(cur) && cur->type == -1)
				cur->type = OPT;
			if (cur->type == -1)
				cur->type = ARG;
			cur = cur->next;
		}
	}
}


/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utilsv8.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: nadjemia <nadjemia@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/04 13:06:56 by noah              #+#    #+#             */
/*   Updated: 2024/06/21 16:30:20 by nadjemia         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../minishell.h"

void	is_in_quote(int *in_single, int *in_double, char c)
{
	if (c == '"' && !(*in_single))
		*in_double = !(*in_double);
	if (c == '\'' && !(*in_double))
		*in_single = !(*in_single);
}

// free les tokens et leurs membres
void	free_tokens(t_token **tokens)
{
	t_token	*cur;
	t_token	*rm;
	int		i;
		
	i = 0;
	cur = tokens[i];
	while (tokens[i])
	{
		while (cur)
		{
			rm = cur;
			free(cur->content);
			cur = cur->next;
			free(rm);
		}
		i++;
	}
	free(tokens);
}

// ajoute un token à la liste chainée
int	add_token(t_token **tokens, char *content, int nbr_pipe)
{
	t_token	*cur;
	t_token	*new;

	if (!content[0])
		return (1);
	new = (t_token *)malloc(sizeof(t_token));
	if (!new)
		return (0);
	new->content = ft_strdup(content);
	new->nbr_pipe = nbr_pipe;
	new->next = NULL;
	new->type = -1;
	cur = *tokens;
	if (!cur)
	{
		new->prev = NULL;
		*tokens = new;
	}
	else
	{
		while (cur->next)
			cur = cur->next;
		cur->next = new;
		new->prev = cur;
	}
	return (1);
}
